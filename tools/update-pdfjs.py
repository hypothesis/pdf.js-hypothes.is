#!/usr/bin/env python3

from argparse import ArgumentParser
import os
import sys
import shutil
import tarfile
from pathlib import Path
import re
import subprocess


def main():
    parser = ArgumentParser(description="""
Update PDF.js from a build of the PDF.js website.

To download a PDF.js build, go to
https://github.com/mozilla/pdf.js/actions/workflows/publish_website.yml, select
the latest deployment and download the "github-pages" artifact.
""")
    parser.add_argument("archive_path", help="Path to PDF.js website tarball")
    args = parser.parse_args()

    dest_dir = Path("viewer")
    archive_path = Path(args.archive_path)
    prefix = "legacy"
    strip_components = 1
    extract_patterns = [f"{prefix}/build", f"{prefix}/web", f"{prefix}/LICENSE"]

    extract_tarball(archive_path, dest_dir, strip_components, extract_patterns)
    modify_extracted_files(dest_dir)
    pdfjs_version = read_pdfjs_version(dest_dir)

    print(f"Found PDF.js version {pdfjs_version}.")
    commit_changes(dest_dir, pdfjs_version)


def extract_tarball(
    archive_path: Path, dest_dir: Path, strip_components: int, patterns: list[str]
):
    """
    Extract files from a tarball into a destination directory.
    """
    print("Extracting PDF.js website tarball...")
    if dest_dir.exists():
        shutil.rmtree(dest_dir)
    dest_dir.mkdir(parents=True, exist_ok=True)

    with tarfile.open(archive_path, "r") as tar:
        for member in tar.getmembers():
            member_path = Path(member.name)
            if any(str(member_path).startswith(pattern) for pattern in patterns):
                # Strip the specified number of leading components
                stripped_parts = member_path.parts[strip_components:]
                if not stripped_parts:
                    continue  # Skip if stripping removes all parts
                target_path = dest_dir.joinpath(*stripped_parts)
                if member.isdir():
                    target_path.mkdir(parents=True, exist_ok=True)
                elif member.isfile() or member.islnk() or member.issym():
                    target_path.parent.mkdir(parents=True, exist_ok=True)
                    with tar.extractfile(member) as source, open(
                        target_path, "wb"
                    ) as dest_file:
                        shutil.copyfileobj(source, dest_file)


def modify_extracted_files(dest_dir):
    """Modify the extracted files as per the original script."""
    print("Modifying extracted files...")

    # Modify viewer.mjs
    viewer_mjs = dest_dir / "web" / "viewer.mjs"
    replace_in_file(
        viewer_mjs,
        "HOSTED_VIEWER_ORIGINS.includes(viewerOrigin)",
        "true /* Hypothesis */",
    )

    # Copy pdfjs-init.js to viewer/web/
    init_js_src = Path("pdfjs-init.js")
    if not init_js_src.is_file():
        print(f'Error: "{init_js_src}" not found.')
        sys.exit(1)
    init_js_dest = dest_dir / "web" / "pdfjs-init.js"
    shutil.copy(init_js_src, init_js_dest)

    # Modify viewer.html to include the script tag before </head>
    viewer_html = dest_dir / "web" / "viewer.html"
    insert_script_before_head_close(viewer_html, "pdfjs-init.js")

    # Add HYPOTHESIS-README.md
    readme_path = dest_dir / "HYPOTHESIS-README.md"
    readme_content = (
        "# Hypothesis README\n\n"
        "This is a build of the PDF.js viewer auto-generated by tools/update-pdfjs.\n"
    )
    readme_path.write_text(readme_content, encoding="utf-8")


def replace_in_file(file_path, search_str, replace_str):
    """Replace all occurrences of search_str with replace_str in the given file."""
    try:
        content = file_path.read_text(encoding="utf-8")
    except Exception as e:
        print(f"Error reading {file_path}: {e}")
        sys.exit(1)

    new_content = content.replace(search_str, replace_str)

    try:
        file_path.write_text(new_content, encoding="utf-8")
    except Exception as e:
        print(f"Error writing to {file_path}: {e}")
        sys.exit(1)


def insert_script_before_head_close(html_file, script_src):
    """Insert a script tag before the closing </head> tag in an HTML file."""
    try:
        content = html_file.read_text(encoding="utf-8")
    except Exception as e:
        print(f"Error reading {html_file}: {e}")
        sys.exit(1)

    script_tag = f'<script src="{script_src}"></script>'
    new_content, count = re.subn(
        r"(</head>)", f"{script_tag}\\1", content, flags=re.IGNORECASE
    )

    if count == 0:
        print(f"Warning: </head> tag not found in {html_file}. Script not inserted.")

    try:
        html_file.write_text(new_content, encoding="utf-8")
    except Exception as e:
        print(f"Error writing to {html_file}: {e}")
        sys.exit(1)


def read_pdfjs_version(dest_dir):
    """Extract the PDF.js version from viewer.mjs."""
    viewer_mjs = dest_dir / "web" / "viewer.mjs"
    version_pattern = re.compile(r'const\s+pdfjsVersion\s*=\s*[\'"]([\d.]+)[\'"]')

    try:
        content = viewer_mjs.read_text(encoding="utf-8")
    except Exception as e:
        print(f"Error reading {viewer_mjs}: {e}")
        sys.exit(1)

    match = version_pattern.search(content)
    if not match:
        print(f"Error: PDF.js version not found in {viewer_mjs}.")
        sys.exit(1)

    return match.group(1)


def commit_changes(dest_dir, version):
    """Stage and commit the changes using git."""
    print("Committing changes...")

    try:
        subprocess.run(["git", "add", str(dest_dir)], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error running git add: {e}")
        sys.exit(1)

    commit_message = (
        f"Update PDF.js to v{version}\n\n"
        f"Update PDF.js using {Path(sys.argv[0]).name}."
    )

    try:
        subprocess.run(["git", "commit", "-m", commit_message], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error running git commit: {e}")
        sys.exit(1)

    print("Changes committed successfully.")


if __name__ == "__main__":
    main()
